package avgo_test

import (
	"testing"

	"github.com/bubbajoe/avgo"
	"github.com/stretchr/testify/require"
)

func TestCodecContext(t *testing.T) {
	_, s1, s2, err := videoInputStreams()
	require.NoError(t, err)

	c1 := avgo.FindDecoder(s1.CodecParameters().CodecID())
	require.NotNil(t, c1)
	cc1 := avgo.AllocCodecContext(c1)
	require.NotNil(t, cc1)
	defer cc1.Free()
	err = s1.CodecParameters().ToCodecContext(cc1)
	require.NoError(t, err)
	require.Equal(t, "Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 320x180 [SAR 1:1 DAR 16:9], 441 kb/s", cc1.String())
	require.Equal(t, int64(441324), cc1.BitRate())
	require.Equal(t, avgo.ChromaLocationLeft, cc1.ChromaLocation())
	require.Equal(t, avgo.CodecIDH264, cc1.CodecID())
	require.Equal(t, avgo.ColorPrimariesUnspecified, cc1.ColorPrimaries())
	require.Equal(t, avgo.ColorRangeUnspecified, cc1.ColorRange())
	require.Equal(t, avgo.ColorSpaceUnspecified, cc1.ColorSpace())
	require.Equal(t, avgo.ColorTransferCharacteristicUnspecified, cc1.ColorTransferCharacteristic())
	require.Equal(t, 12, cc1.GopSize())
	require.Equal(t, 180, cc1.Height())
	require.Equal(t, avgo.Level(13), cc1.Level())
	require.Equal(t, avgo.MediaTypeVideo, cc1.MediaType())
	require.Equal(t, avgo.PixelFormatYuv420P, cc1.PixelFormat())
	require.Equal(t, avgo.ProfileH264ConstrainedBaseline, cc1.Profile())
	require.Equal(t, avgo.NewRational(1, 1), cc1.SampleAspectRatio())
	require.Equal(t, avgo.StrictStdComplianceNormal, cc1.StrictStdCompliance())
	require.Equal(t, 1, cc1.ThreadCount())
	require.Equal(t, avgo.ThreadType(3), cc1.ThreadType())
	require.Equal(t, 320, cc1.Width())

	c2 := avgo.FindDecoder(s2.CodecParameters().CodecID())
	require.NotNil(t, c2)
	cc2 := avgo.AllocCodecContext(c2)
	require.NotNil(t, cc2)
	defer cc2.Free()
	err = s2.CodecParameters().ToCodecContext(cc2)
	require.NoError(t, err)
	require.Equal(t, "Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 161 kb/s", cc2.String())
	require.Equal(t, int64(161052), cc2.BitRate())
	require.Equal(t, 2, cc2.Channels())
	require.Equal(t, avgo.ChannelLayoutStereo, cc2.ChannelLayout())
	require.Equal(t, avgo.CodecIDAac, cc2.CodecID())
	require.Equal(t, 1024, cc2.FrameSize())
	require.Equal(t, avgo.MediaTypeAudio, cc2.MediaType())
	require.Equal(t, avgo.SampleFormatFltp, cc2.SampleFormat())
	require.Equal(t, 48000, cc2.SampleRate())
	require.Equal(t, avgo.StrictStdComplianceNormal, cc2.StrictStdCompliance())
	require.Equal(t, 1, cc2.ThreadCount())
	require.Equal(t, avgo.ThreadType(3), cc2.ThreadType())

	c3 := avgo.FindEncoder(avgo.CodecIDMjpeg)
	require.NotNil(t, c3)
	cc3 := avgo.AllocCodecContext(c3)
	require.NotNil(t, cc3)
	defer cc3.Free()
	cc3.SetHeight(2)
	cc3.SetPixelFormat(avgo.PixelFormatYuvj420P)
	cc3.SetTimeBase(avgo.NewRational(1, 1))
	cc3.SetWidth(3)
	err = cc3.Open(c3, nil)
	require.NoError(t, err)

	cc4 := avgo.AllocCodecContext(nil)
	require.NotNil(t, cc4)
	defer cc4.Free()
	cc4.SetBitRate(1)
	cc4.SetChannelLayout(avgo.ChannelLayout21)
	cc4.SetChannels(3)
	cc4.SetFlags(avgo.NewCodecContextFlags(4))
	cc4.SetFlags2(avgo.NewCodecContextFlags2(5))
	cc4.SetFramerate(avgo.NewRational(6, 1))
	cc4.SetGopSize(7)
	cc4.SetHeight(8)
	cc4.SetPixelFormat(avgo.PixelFormat0Bgr)
	cc4.SetSampleAspectRatio(avgo.NewRational(10, 1))
	cc4.SetSampleFormat(avgo.SampleFormatDbl)
	cc4.SetSampleRate(12)
	cc4.SetStrictStdCompliance(avgo.StrictStdComplianceExperimental)
	cc4.SetThreadCount(13)
	cc4.SetThreadType(avgo.ThreadTypeSlice)
	cc4.SetTimeBase(avgo.NewRational(15, 1))
	cc4.SetWidth(16)
	require.Equal(t, int64(1), cc4.BitRate())
	require.Equal(t, avgo.ChannelLayout21, cc4.ChannelLayout())
	require.Equal(t, 3, cc4.Channels())
	require.Equal(t, avgo.NewCodecContextFlags(4), cc4.Flags())
	require.Equal(t, avgo.NewCodecContextFlags2(5), cc4.Flags2())
	require.Equal(t, avgo.NewRational(6, 1), cc4.Framerate())
	require.Equal(t, 7, cc4.GopSize())
	require.Equal(t, 8, cc4.Height())
	require.Equal(t, avgo.PixelFormat0Bgr, cc4.PixelFormat())
	require.Equal(t, avgo.NewRational(10, 1), cc4.SampleAspectRatio())
	require.Equal(t, avgo.SampleFormatDbl, cc4.SampleFormat())
	require.Equal(t, 12, cc4.SampleRate())
	require.Equal(t, avgo.StrictStdComplianceExperimental, cc4.StrictStdCompliance())
	require.Equal(t, 13, cc4.ThreadCount())
	require.Equal(t, avgo.ThreadTypeSlice, cc4.ThreadType())
	require.Equal(t, avgo.NewRational(15, 1), cc4.TimeBase())
	require.Equal(t, 16, cc4.Width())

	// TODO Test ReceivePacket
	// TODO Test SendPacket
	// TODO Test ReceiveFrame
	// TODO Test SendFrame
}
